# **********************************************************************
#
# Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.5.1
#
# <auto-generated>
#
# Generated from file `arithmetic.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module Arithmetic
_M_Arithmetic = Ice.openModule('Arithmetic')
__name__ = 'Arithmetic'

if 'GenericError' not in _M_Arithmetic.__dict__:
    _M_Arithmetic.GenericError = Ice.createTempClass()
    class GenericError(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_name = 'Arithmetic::GenericError'

    _M_Arithmetic._t_GenericError = IcePy.defineException('::Arithmetic::GenericError', GenericError, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    GenericError._ice_type = _M_Arithmetic._t_GenericError

    _M_Arithmetic.GenericError = GenericError
    del GenericError

if 'Natural' not in _M_Arithmetic.__dict__:
    _M_Arithmetic.Natural = Ice.createTempClass()
    class Natural(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_Arithmetic.Natural:
                raise RuntimeError('Arithmetic.Natural is an abstract class')

        def ice_ids(self, current=None):
            return ('::Arithmetic::Natural', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Arithmetic::Natural'

        def ice_staticId():
            return '::Arithmetic::Natural'
        ice_staticId = staticmethod(ice_staticId)

        def add(self, a, b, current=None):
            pass

        def substract(self, a, b, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_Arithmetic._t_Natural)

        __repr__ = __str__

    _M_Arithmetic.NaturalPrx = Ice.createTempClass()
    class NaturalPrx(Ice.ObjectPrx):

        def add(self, a, b, _ctx=None):
            return _M_Arithmetic.Natural._op_add.invoke(self, ((a, b), _ctx))

        def begin_add(self, a, b, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Arithmetic.Natural._op_add.begin(self, ((a, b), _response, _ex, _sent, _ctx))

        def end_add(self, _r):
            return _M_Arithmetic.Natural._op_add.end(self, _r)

        def substract(self, a, b, _ctx=None):
            return _M_Arithmetic.Natural._op_substract.invoke(self, ((a, b), _ctx))

        def begin_substract(self, a, b, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_Arithmetic.Natural._op_substract.begin(self, ((a, b), _response, _ex, _sent, _ctx))

        def end_substract(self, _r):
            return _M_Arithmetic.Natural._op_substract.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_Arithmetic.NaturalPrx.ice_checkedCast(proxy, '::Arithmetic::Natural', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_Arithmetic.NaturalPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_Arithmetic._t_NaturalPrx = IcePy.defineProxy('::Arithmetic::Natural', NaturalPrx)

    _M_Arithmetic._t_Natural = IcePy.defineClass('::Arithmetic::Natural', Natural, -1, (), True, False, None, (), ())
    Natural._ice_type = _M_Arithmetic._t_Natural

    Natural._op_add = IcePy.Operation('add', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Arithmetic._t_GenericError,))
    Natural._op_substract = IcePy.Operation('substract', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0), ((), IcePy._t_int, False, 0)), (), ((), IcePy._t_int, False, 0), (_M_Arithmetic._t_GenericError,))

    _M_Arithmetic.Natural = Natural
    del Natural

    _M_Arithmetic.NaturalPrx = NaturalPrx
    del NaturalPrx

# End of module Arithmetic
